import { ApplicationError } from "./Types";

export enum JwtErrors {
  JWT_TOKEN_EXPIRED = "jwt expired",
  JWT_TOKEN_MALFORMED = "jwt malformed",
}

export enum GeneralErrors {
  METHOD_NOT_IMPLEMENTED = "METHOD_NOT_IMPLEMENTED",
  TOO_MANY_ATTEMPTS = "TOO_MANY_ATTEMPTS",
  VALIDATION_ERROR = "VALIDATION_ERROR",
  UNHANDLED_ERROR = "UNHANDLED_ERROR",
  USER_TOKEN_IS_MISSING = "USER_TOKEN_IS_MISSING",
  OBJECT_NOT_FOUND_IN_DATABASE = "OBJECT_NOT_FOUND_IN_DATABASE",
  INVALID_REQUEST = "INVALID_REQUEST",
  PACKET_NOT_AUTHENTIC = "PACKET_NOT_AUTHENTIC",
  URL_CANT_BE_LOADED = "URL_CANT_BE_LOADED",
  DATABASE_REQUEST_ERROR = "DATABASE_REQUEST_ERROR",
  TEMPLATE_PREVIEW_NOT_FOUND = "TEMPLATE_PREVIEW_NOT_FOUND",
  UNVALID_FILE_PATH = "UNVALID_FILE_PATH",
  INVALID_SERVICE = "INVALID_SERVICE",
  INVALID_CREDENTIALS = "INVALID_CREDENTIALS",
  MUST_MYSL_ACTIVE = "MUST_MYSL_ACTIVE",
  BEARER_TOKEN_ERROR = "BEARER_TOKEN_ERROR"
}

export enum AuthenticationErrors {
  ACCESS_NOT_AUTHORIZED = "ACCESS_NOT_AUTHORIZED",
}

export enum UserErrors {
  USER_LOGIN_EXIST = "USER_LOGIN_EXIST",
  USER_EMAIL_EXIST = "USER_EMAIL_EXIST",
}

export enum CronErrors {
  CRON_NOT_FOUND = "CRON_NOT_FOUND",
  CRON_ERROR = "CRON_ERROR",
  CRON_NO_RUN_FUNC = "CRON_NO_RUN_FUNC",
}

export type ApplicationReject = (error: ApplicationError) => void;
